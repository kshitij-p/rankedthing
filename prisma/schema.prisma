// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    role          UserRole    @default(USER)
    accounts      Account[]
    sessions      Session[]
    VideoClip     VideoClip[]
    ClipVote      ClipVote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GameRank {
    id     String @id @default(cuid())
    name   String @db.Char(255)
    Game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    minElo Int
    maxElo Int
    gameId Int

    realRankClips VideoClip[] @relation("RealRankClips")
    fakeRankClips VideoClip[] @relation("FakeRankClips")

    @@index([gameId])
}

model Game {
    id         Int         @id @default(autoincrement())
    title      String      @unique @db.Char(255)
    shortTitle String      @unique @db.Char(255)
    ranks      GameRank[]
    VideoClip  VideoClip[]
}

model ClipVote {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    clip        VideoClip @relation(fields: [videoClipId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    videoClipId String

    guessedHigher Boolean

    score       Int
    submittedAt DateTime @default(now())

    @@unique([videoClipId, userId])
    @@index([userId])
}

model VideoClip {
    id    String @id @default(cuid())
    title String @db.Text

    user   User   @relation(fields: [userId], references: [id])
    userId String

    game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    gameId Int

    realRank   GameRank @relation("RealRankClips", fields: [realRankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    realRankId String   @db.Char(255)

    fakeRank   GameRank @relation("FakeRankClips", fields: [fakeRankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    fakeRankId String   @db.Char(255)

    ytUrl String @db.Text

    submittedAt DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    ClipVote    ClipVote[]

    @@index([userId])
    @@index([gameId])
    @@index([realRankId])
    @@index([fakeRankId])
}
